apply plugin: 'java'
buildscript { 						// 定义脚本使用资源
    apply from: 'dependencies.gradle' // 引入所需要的依赖库文件
    repositories { 						// 脚本资源仓库
        mavenCentral()
    }
    dependencies { 						// 依赖库
        classpath libraries.'spring-boot-gradle-plugin'
    }
}
group project_group
version project_version
apply from: 'dependencies.gradle' // 引入所需要的依赖库文件
def env = System.getProperty("env") ?: 'dev' // 获取env环境属性
subprojects {
    apply plugin: 'java' // 引入之前的插件
    apply plugin: 'org.springframework.boot' // 引入之前的插件
    apply plugin: 'io.spring.dependency-management' // 引入之前的插件
    sourceCompatibility = project_jdk // 本次项目都是基于JDK-11版本编写的
    targetCompatibility = project_jdk // 本次项目都是基于JDK-11版本编写的
    repositories {  // 配置Gradle仓库
        mavenCentral()
    }
    dependencies {  // 公共依赖库管理
        implementation('org.springframework.boot:spring-boot-devtools') // 允许进行项目的热部署
        testImplementation('org.springframework.boot:spring-boot-starter-test') { // 此时默认会引入JUnit4组件
            exclude group: 'junit', module: 'junit' // 移除旧版本的测试工具
        }
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation(enforcedPlatform(libraries.'junit-bom')) // 将当前的项目强制性的绑定为JUnit5运行
        testImplementation(libraries.'junit-jupiter-api')
        testImplementation(libraries.'junit-vintage-engine')
        testImplementation(libraries.'junit-jupiter-engine')
        testImplementation(libraries.'junit-platform-launcher')        

        compileOnly(libraries.'lombok') // 在编译的时候生效
        annotationProcessor(libraries.'lombok') // 在注解的时候让其生效
    }
    sourceSets {    // 源代码目录配置
        main { // main及相关子目录配置
            java { srcDirs = ['src/main/java'] }
            resources { srcDirs = ['src/main/resources', "src/main/profiles/$env"] }
        }
        test { // test及相关子目录配置
            java { srcDirs = ['src/test/java'] }
            resources { srcDirs = ['src/test/resources'] }
        }
    }
    test {  // 配置测试任务
        useJUnitPlatform() // 使用JUnit测试平台
    }
    task sourceJar(type: Jar, dependsOn: classes) { // 源代码的打包任务
        archiveClassifier = 'sources' // 设置文件的后缀
        from sourceSets.main.allSource // 所有源代码的读取路径
    }
    task javadocTask(type: Javadoc) { // JavaDoc文档打包任务
        options.encoding = 'UTF-8' // 设置文件编码
        source = sourceSets.main.allJava // 定义所有的Java源代码
    }
    task javadocJar(type: Jar, dependsOn: javadocTask) { // 先生成JavaDoc再打包
        archiveClassifier = 'javadoc' // 文件标记类型
        from javadocTask.destinationDir // 通过JavadocTask任务中找到目标路径
    }
    tasks.withType(Javadoc) {   // 文档编码配置
        options.encoding = 'UTF-8' // 定义编码
    }
    tasks.withType(JavaCompile) {   // 编译编码配置
        options.encoding = 'UTF-8' // 定义编码
    }
    artifacts { // 最终的打包的操作任务
        archives sourceJar // 源代码打包
        archives javadocJar // javadoc打包
    }
    gradle.taskGraph.whenReady {    // 在所有的操作准备好后触发
        tasks.each { task ->    // 找出所有的任务
            if (task.name.contains('test')) {   // 如果现在发现有test任务
                // 如果将enabled设置为true表示要执行测试任务，如果设置为false表示不执行测试任务
                task.enabled = true
            }
        }
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8' // 编码配置
}
project('microboot-web') { // 子模块
    dependencies { // 配置子模块依赖
        implementation (project(':microboot-common')) // 引入其他子模块        
    }
}
project('microboot-common') { // 子模块
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
//        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    } // 配置子模块依赖
}